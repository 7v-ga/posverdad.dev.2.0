# ===============================================
#  Posverdad — .env.example
#  Copia este archivo como `.env` y ajusta valores.
# ===============================================

# === Entorno ===
ENV=dev
LOG_LEVEL=INFO
LOG_TO_CONSOLE=true        # true/false — logging en consola
TOKENIZERS_PARALLELISM=false

# === Directorios (logs / reportes / gráficos) ===
REPORTS_DIR=reports
GRAPHS_DIR=graphs
LOGS_DIR=logs

# === Base de datos (Postgres) ===
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=posverdad
POSTGRES_USER=posverdad
POSTGRES_PASSWORD=posverdad

# URL de conexión (SQLAlchemy)
# ¡OJO! Usa psycopg2 (tu código create_engine lo espera con +psycopg2)
DATABASE_URL=postgresql+psycopg2://posverdad:posverdad@localhost:5432/posverdad

# === Redis / Celery (opcional) ===
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=${REDIS_URL}
CELERY_RESULT_BACKEND=${REDIS_URL}

# === Scraping ===
# Límite superior de artículos para una corrida (0 = sin límite)
SCRAPE_LIMIT=0
# Timeout de requests HTTP (segundos)
SCRAPE_TIMEOUT=20
# Cortes por duplicados
MAX_DUPLICATES_IN_A_ROW=50      # corta si encuentra duplicados consecutivos >= a este umbral
MAX_DUPLICATES_TOTAL=0          # 0 desactiva; si >0 corta si duplicados (totales) >= a este valor
# Validación mínima
MIN_BODY_LEN=50                 # descarta artículos con body muy corto

# === NLP ===
SPACY_MODEL=es_core_news_md
# Modelo de sentimiento (ejemplos: pysentimiento/robertuito-sentiment-analysis, bert-base-multilingual-cased, etc.)
TRANSFORMERS_MODEL=pysentimiento/robertuito-sentiment-analysis

# === Notificaciones (Slack) ===
# Puedes usar Bot API (chat.postMessage) y/o Webhook.
# - SLACK_BOT_TOKEN: token xoxb- de tu app con scopes (chat:write, files:write, channels:read, groups:read, channels:join)
# - SLACK_CHANNEL: ID del canal (recomendado) o nombre. Ejemplo ID: C0123456789
# - SLACK_CHANNEL_IS_ID=1: si está en 1, se usa el valor tal cual como ID (no se intenta resolver por API).
# - SLACK_WEBHOOK_URL: opcional; si el post por Bot falla, puede usarse como fallback (pero postea solo en el canal asociado al webhook).
SLACK_BOT_TOKEN=xoxb-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SLACK_CHANNEL=C0123456789
SLACK_CHANNEL_IS_ID=1
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T0XXXXXXXXX/B0XXXXXXXXX/XXXXXXXXXXXXXXX
# Debug opcional
SLACK_DEBUG=0                  # 1 para ver logs de diagnóstico

# === Reportes y Notificaciones críticas ===
NOTIFY_CRITICAL=true           # true/false — activa alertas Slack ante errores críticos (si tu código lo usa)

# === Run ID manual (opcional para scripts de resumen) ===
# Si no se define, notify_summary resolverá el último automáticamente.
LAST_RUN_ID=

# === API (FastAPI/Uvicorn — si la usas) ===
API_HOST=0.0.0.0
API_PORT=8000
